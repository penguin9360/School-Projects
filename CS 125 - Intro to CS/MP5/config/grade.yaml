name: "MP5"
version: 1.0.0
grading:
  timeout: PT5M
  run: "./gradlew grade -Pgrade.capture -Pgrade.secure -Pgrade.reporting.file={{ gradeFile }}"
  ignoreOutput:
    - "^java.security.policy: error parsing file.*"
    - "^Unable to initialize policy entry:.*"
    - "^.*?expected \\[\\;\\], found \\[priority\\]$"
    - "^WARNING: An illegal reflective access operation has occurred.*"
    - "^WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass.*"
    - "^WARNING: Please consider reporting this to the maintainers.*"
    - "^WARNING: Use --illegal-access=warn to enable warnings.*"
    - "^WARNING: All illegal access operations will be denied in a future release.*"
    - "^The TaskInternal.*"
scoring:
  max: 100
  selectors:
    - checkstyle
    - test
vcs:
  git: true
students:
  location: email.txt
  require: true
  count: 1
  suffix: "@illinois.edu"
files:
  - "DNA"
  - "SingleLL"
  - "Tree"
secure: config/security.policy
reporting:
  post: "https://cs125-reporting.cs.illinois.edu/progress"
notes:
  "Note that the maximum local grade is 90/100. 10 points will be provided
  during official grading if you have committed code that earns at least 30
  points by Monday 3/26/2018 at 5PM."
checkstyle:
  name: "checkstyle Tests"
  missing:
    score: 0
    message: "checkstyle failed to run"
    name: "checkstyle"
  selectors:
    - selector: "count(//file/error) = 0"
      score: 10
      message: "No checkstyle errors were reported"
      name: "checkstyle"
    - selector: "count(//file/error) > 0"
      score: 0
      message: "checkstyle errors were reported"
      name: "checkstyle"
test:
  name: "testNG Tests"
  selectors:
    - selector: "count(//testcase[@name='testListInsert']) = 1 and count(//testcase[@name='testListInsert']//failure) = 0"
      score: 5
      message: "testListInsert succeeded"
      name: "testListInsert"
    - selector: "count(//testcase[@name='testListInsert']) = 1 and count(//testcase[@name='testListInsert']//failure) > 0"
      score: 0
      message: "testListInsert failed"
      name: "testListInsert"
    - selector: "count(//testcase[@name='testListRemove']) = 1 and count(//testcase[@name='testListRemove']//failure) = 0"
      score: 5
      message: "testListRemove succeeded"
      name: "testListRemove"
    - selector: "count(//testcase[@name='testListRemove']) = 1 and count(//testcase[@name='testListRemove']//failure) > 0"
      score: 0
      message: "testListRemove failed"
      name: "testListRemove"
    - selector: "count(//testcase[@name='testListSwaps']) = 1 and count(//testcase[@name='testListSwaps']//failure) = 0"
      score: 10
      message: "testListSwaps succeeded"
      name: "testListSwaps"
    - selector: "count(//testcase[@name='testListSwaps']) = 1 and count(//testcase[@name='testListSwaps']//failure) > 0"
      score: 0
      message: "testListSwaps failed"
      name: "testListSwaps"
    - selector: "count(//testcase[@name='testCreate']) = 1 and count(//testcase[@name='testCreate']//failure) = 0"
      score: 10
      message: "testCreate succeeded"
      name: "testCreate"
    - selector: "count(//testcase[@name='testCreate']) = 1 and count(//testcase[@name='testCreate']//failure) > 0"
      score: 0
      message: "testCreate failed"
      name: "testCreate"
    - selector: "count(//testcase[@name='testMinAndMax']) = 1 and count(//testcase[@name='testMinAndMax']//*[self::failure or self::skipped]) = 0"
      score: 10
      message: "testMinAndMax succeeded"
      name: "testMinAndMax"
    - selector: "count(//testcase[@name='testMinAndMax']) = 1 and count(//testcase[@name='testMinAndMax']//*[self::failure or self::skipped]) > 0"
      score: 0
      message: "testMinAndMax failed"
      name: "testMinAndMax"
    - selector: "count(//testcase[@name='testSearch']) = 1 and count(//testcase[@name='testSearch']//*[self::failure or self::skipped]) = 0"
      score: 10
      message: "testSearch succeeded"
      name: "testSearch"
    - selector: "count(//testcase[@name='testSearch']) = 1 and count(//testcase[@name='testSearch']//*[self::failure or self::skipped]) > 0"
      score: 0
      message: "testSearch failed"
      name: "testSearch"
    - selector: "count(//testcase[@name='testDepth']) = 1 and count(//testcase[@name='testDepth']//*[self::failure or self::skipped]) = 0"
      score: 10
      message: "testDepth succeeded"
      name: "testDepth"
    - selector: "count(//testcase[@name='testDepth']) = 1 and count(//testcase[@name='testDepth']//*[self::failure or self::skipped]) > 0"
      score: 0
      message: "testDepth failed"
      name: "testDepth"
    - selector: "count(//testcase[@name='testDescendants']) = 1 and count(//testcase[@name='testDescendants']//*[self::failure or self::skipped]) = 0"
      score: 10
      message: "testDescendants succeeded"
      name: "testDescendants"
    - selector: "count(//testcase[@name='testDescendants']) = 1 and count(//testcase[@name='testDescendants']//*[self::failure or self::skipped]) > 0"
      score: 0
      message: "testDescendants failed"
      name: "testDescendants"
    - selector: "count(//testsuite[@name='DNATest']) = 1 and count(//testsuite[@name='DNATest']//failure) = 0"
      score: 10
      message: "DNATest succeeded"
      name: "DNATest"
    - selector: "count(//testsuite[@name='DNATest']) = 1 and count(//testsuite[@name='DNATest']//failure) > 0"
      score: 0
      message: "DNATest failed"
      name: "DNATest"

# vim: ts=2:sw=2:et
