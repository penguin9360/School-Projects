import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

import org.testng.Assert;
import org.testng.annotations.Test;

/**
 * Test suite for the TimesTable class.
 * <p>
 * The provided test suite is correct and complete. You should not need to modify it. However, you
 * should understand it. You will need to augment or write test suites for later MPs.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/2/">MP2 Documentation</a>
 */
public class TimesTableTest {

    /**
     * Timeout for our tests. Solution takes 90 ms.
     */
    private static final int TEST_TIMEOUT = 900;

    /**
     * Test with precomputed values.
     */
    @Test(timeOut = TEST_TIMEOUT)
    public void testCreateTimesTable() {
        for (Map.Entry<ArrayList<Integer>, Integer[][]> precomputed : PRECOMPUTED_RESULTS.entrySet()) {
            ArrayList<Integer> input = precomputed.getKey();
            Integer[][] output = precomputed.getValue();

            String parameterString = input.get(0) + ", " + input.get(1);
            int[][] result = TimesTable.createTimesTable(input.get(0), input.get(1));
            if (output == null) {
                Assert.assertNull(result, "Result array should be null for: " + parameterString);
                continue;
            } else {
                Assert.assertNotNull(result, "Result array should not be null for: " + parameterString);
            }
            Assert.assertEquals(result.length, output.length,
                    "Arrays should have same size for: " + parameterString);
            Assert.assertEquals(result[0].length, output[0].length,
                    "Arrays should have same size for: " + parameterString);

            if (!Arrays.deepEquals(output, result)) {
                for (int i = 0; i < result.length; i++) {
                    for (int j = 0; j < result.length; j++) {
                        Assert.assertEquals((int) output[i][j], result[i][j],
                                "Mismatch at (" + i + ", " + j + ") for " + parameterString);
                    }
                }
            }
        }
    }

    /**
     * Pre-computed testing values.
     */
    private static final Map<ArrayList<Integer>, Integer[][]> PRECOMPUTED_RESULTS =
            new LinkedHashMap<>() {
                {
                    put(new ArrayList<>() {
                        {
                            add(0);
                            add(1);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(1);
                            add(1);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(1);
                            add(0);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(-4);
                            add(-2);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(1);
                            add(2);
                        }
                    }, new Integer[][] { { 0, 1, 2 }, { 1, 1, 2 }, { 2, 2, 4 } });
                    put(new ArrayList<>() {
                        {
                            add(2);
                            add(3);
                        }
                    }, new Integer[][] { { 0, 2, 3 }, { 2, 4, 6 }, { 3, 6, 9 } });
                    /* BEGIN AUTOGENERATED CODE */
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(12);
                        }
                    }, new Integer[][] {
                    {0, 6, 7, 8, 9, 10, 11, 12},
                    {6, 36, 42, 48, 54, 60, 66, 72},
                    {7, 42, 49, 56, 63, 70, 77, 84},
                    {8, 48, 56, 64, 72, 80, 88, 96},
                    {9, 54, 63, 72, 81, 90, 99, 108},
                    {10, 60, 70, 80, 90, 100, 110, 120},
                    {11, 66, 77, 88, 99, 110, 121, 132},
                    {12, 72, 84, 96, 108, 120, 132, 144},
                    });
                    put(new ArrayList<>() {
                        {
                            add(15);
                            add(24);
                        }
                    }, new Integer[][] {
                    {0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24},
                    {15, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360},
                    {16, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384},
                    {17, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408},
                    {18, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432},
                    {19, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456},
                    {20, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480},
                    {21, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504},
                    {22, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528},
                    {23, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552},
                    {24, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576},
                    });
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(29);
                        }
                    }, new Integer[][] {
                    {0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29},
                    {6, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174},
                    {7, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189, 196, 203},
                    {8, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232},
                    {9, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243, 252, 261},
                    {10, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290},
                    {11, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319},
                    {12, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348},
                    {13, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377},
                    {14, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378, 392, 406},
                    {15, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405, 420, 435},
                    {16, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464},
                    {17, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425, 442, 459, 476, 493},
                    {18, 108, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486, 504, 522},
                    {19, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513, 532, 551},
                    {20, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580},
                    {21, 126, 147, 168, 189, 210, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567, 588, 609},
                    {22, 132, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594, 616, 638},
                    {23, 138, 161, 184, 207, 230, 253, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621, 644, 667},
                    {24, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696},
                    {25, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725},
                    {26, 156, 182, 208, 234, 260, 286, 312, 338, 364, 390, 416, 442, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702, 728, 754},
                    {27, 162, 189, 216, 243, 270, 297, 324, 351, 378, 405, 432, 459, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729, 756, 783},
                    {28, 168, 196, 224, 252, 280, 308, 336, 364, 392, 420, 448, 476, 504, 532, 560, 588, 616, 644, 672, 700, 728, 756, 784, 812},
                    {29, 174, 203, 232, 261, 290, 319, 348, 377, 406, 435, 464, 493, 522, 551, 580, 609, 638, 667, 696, 725, 754, 783, 812, 841},
                    });
                    put(new ArrayList<>() {
                        {
                            add(28);
                            add(30);
                        }
                    }, new Integer[][] {
                    {0, 28, 29, 30},
                    {28, 784, 812, 840},
                    {29, 812, 841, 870},
                    {30, 840, 870, 900},
                    });
                    put(new ArrayList<>() {
                        {
                            add(20);
                            add(18);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(9);
                            add(4);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(25);
                            add(12);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(19);
                        }
                    }, new Integer[][] {
                    {0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
                    {6, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114},
                    {7, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133},
                    {8, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152},
                    {9, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171},
                    {10, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190},
                    {11, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209},
                    {12, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228},
                    {13, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247},
                    {14, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238, 252, 266},
                    {15, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285},
                    {16, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304},
                    {17, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323},
                    {18, 108, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288, 306, 324, 342},
                    {19, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361},
                    });
                    put(new ArrayList<>() {
                        {
                            add(10);
                            add(11);
                        }
                    }, new Integer[][] {
                    {0, 10, 11},
                    {10, 100, 110},
                    {11, 110, 121},
                    });
                    put(new ArrayList<>() {
                        {
                            add(10);
                            add(5);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(1);
                            add(6);
                        }
                    }, new Integer[][] {
                    {0, 1, 2, 3, 4, 5, 6},
                    {1, 1, 2, 3, 4, 5, 6},
                    {2, 2, 4, 6, 8, 10, 12},
                    {3, 3, 6, 9, 12, 15, 18},
                    {4, 4, 8, 12, 16, 20, 24},
                    {5, 5, 10, 15, 20, 25, 30},
                    {6, 6, 12, 18, 24, 30, 36},
                    });
                    put(new ArrayList<>() {
                        {
                            add(13);
                            add(15);
                        }
                    }, new Integer[][] {
                    {0, 13, 14, 15},
                    {13, 169, 182, 195},
                    {14, 182, 196, 210},
                    {15, 195, 210, 225},
                    });
                    put(new ArrayList<>() {
                        {
                            add(32);
                            add(3);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(14);
                        }
                    }, new Integer[][] {
                    {0, 6, 7, 8, 9, 10, 11, 12, 13, 14},
                    {6, 36, 42, 48, 54, 60, 66, 72, 78, 84},
                    {7, 42, 49, 56, 63, 70, 77, 84, 91, 98},
                    {8, 48, 56, 64, 72, 80, 88, 96, 104, 112},
                    {9, 54, 63, 72, 81, 90, 99, 108, 117, 126},
                    {10, 60, 70, 80, 90, 100, 110, 120, 130, 140},
                    {11, 66, 77, 88, 99, 110, 121, 132, 143, 154},
                    {12, 72, 84, 96, 108, 120, 132, 144, 156, 168},
                    {13, 78, 91, 104, 117, 130, 143, 156, 169, 182},
                    {14, 84, 98, 112, 126, 140, 154, 168, 182, 196},
                    });
                    put(new ArrayList<>() {
                        {
                            add(29);
                            add(-4);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(12);
                            add(1);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(14);
                            add(10);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(12);
                            add(31);
                        }
                    }, new Integer[][] {
                    {0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
                    {12, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324, 336, 348, 360, 372},
                    {13, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403},
                    {14, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378, 392, 406, 420, 434},
                    {15, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405, 420, 435, 450, 465},
                    {16, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432, 448, 464, 480, 496},
                    {17, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425, 442, 459, 476, 493, 510, 527},
                    {18, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486, 504, 522, 540, 558},
                    {19, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513, 532, 551, 570, 589},
                    {20, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620},
                    {21, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567, 588, 609, 630, 651},
                    {22, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594, 616, 638, 660, 682},
                    {23, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621, 644, 667, 690, 713},
                    {24, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672, 696, 720, 744},
                    {25, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775},
                    {26, 312, 338, 364, 390, 416, 442, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702, 728, 754, 780, 806},
                    {27, 324, 351, 378, 405, 432, 459, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729, 756, 783, 810, 837},
                    {28, 336, 364, 392, 420, 448, 476, 504, 532, 560, 588, 616, 644, 672, 700, 728, 756, 784, 812, 840, 868},
                    {29, 348, 377, 406, 435, 464, 493, 522, 551, 580, 609, 638, 667, 696, 725, 754, 783, 812, 841, 870, 899},
                    {30, 360, 390, 420, 450, 480, 510, 540, 570, 600, 630, 660, 690, 720, 750, 780, 810, 840, 870, 900, 930},
                    {31, 372, 403, 434, 465, 496, 527, 558, 589, 620, 651, 682, 713, 744, 775, 806, 837, 868, 899, 930, 961},
                    });
                    put(new ArrayList<>() {
                        {
                            add(11);
                            add(8);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(25);
                            add(-1);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(7);
                            add(27);
                        }
                    }, new Integer[][] {
                    {0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
                    {7, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189},
                    {8, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216},
                    {9, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243},
                    {10, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270},
                    {11, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297},
                    {12, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324},
                    {13, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351},
                    {14, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378},
                    {15, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405},
                    {16, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432},
                    {17, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425, 442, 459},
                    {18, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486},
                    {19, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513},
                    {20, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540},
                    {21, 147, 168, 189, 210, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567},
                    {22, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594},
                    {23, 161, 184, 207, 230, 253, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621},
                    {24, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648},
                    {25, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675},
                    {26, 182, 208, 234, 260, 286, 312, 338, 364, 390, 416, 442, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702},
                    {27, 189, 216, 243, 270, 297, 324, 351, 378, 405, 432, 459, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729},
                    });
                    put(new ArrayList<>() {
                        {
                            add(14);
                            add(8);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(3);
                            add(27);
                        }
                    }, new Integer[][] {
                    {0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
                    {3, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81},
                    {4, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108},
                    {5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135},
                    {6, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162},
                    {7, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189},
                    {8, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216},
                    {9, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243},
                    {10, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270},
                    {11, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297},
                    {12, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324},
                    {13, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351},
                    {14, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378},
                    {15, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405},
                    {16, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432},
                    {17, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425, 442, 459},
                    {18, 54, 72, 90, 108, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486},
                    {19, 57, 76, 95, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513},
                    {20, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540},
                    {21, 63, 84, 105, 126, 147, 168, 189, 210, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567},
                    {22, 66, 88, 110, 132, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594},
                    {23, 69, 92, 115, 138, 161, 184, 207, 230, 253, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621},
                    {24, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648},
                    {25, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675},
                    {26, 78, 104, 130, 156, 182, 208, 234, 260, 286, 312, 338, 364, 390, 416, 442, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702},
                    {27, 81, 108, 135, 162, 189, 216, 243, 270, 297, 324, 351, 378, 405, 432, 459, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729},
                    });
                    put(new ArrayList<>() {
                        {
                            add(11);
                            add(27);
                        }
                    }, new Integer[][] {
                    {0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
                    {11, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297},
                    {12, 132, 144, 156, 168, 180, 192, 204, 216, 228, 240, 252, 264, 276, 288, 300, 312, 324},
                    {13, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351},
                    {14, 154, 168, 182, 196, 210, 224, 238, 252, 266, 280, 294, 308, 322, 336, 350, 364, 378},
                    {15, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300, 315, 330, 345, 360, 375, 390, 405},
                    {16, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 352, 368, 384, 400, 416, 432},
                    {17, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340, 357, 374, 391, 408, 425, 442, 459},
                    {18, 198, 216, 234, 252, 270, 288, 306, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486},
                    {19, 209, 228, 247, 266, 285, 304, 323, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513},
                    {20, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540},
                    {21, 231, 252, 273, 294, 315, 336, 357, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567},
                    {22, 242, 264, 286, 308, 330, 352, 374, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594},
                    {23, 253, 276, 299, 322, 345, 368, 391, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621},
                    {24, 264, 288, 312, 336, 360, 384, 408, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648},
                    {25, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675},
                    {26, 286, 312, 338, 364, 390, 416, 442, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702},
                    {27, 297, 324, 351, 378, 405, 432, 459, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729},
                    });
                    put(new ArrayList<>() {
                        {
                            add(27);
                            add(9);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(20);
                            add(14);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(23);
                            add(30);
                        }
                    }, new Integer[][] {
                    {0, 23, 24, 25, 26, 27, 28, 29, 30},
                    {23, 529, 552, 575, 598, 621, 644, 667, 690},
                    {24, 552, 576, 600, 624, 648, 672, 696, 720},
                    {25, 575, 600, 625, 650, 675, 700, 725, 750},
                    {26, 598, 624, 650, 676, 702, 728, 754, 780},
                    {27, 621, 648, 675, 702, 729, 756, 783, 810},
                    {28, 644, 672, 700, 728, 756, 784, 812, 840},
                    {29, 667, 696, 725, 754, 783, 812, 841, 870},
                    {30, 690, 720, 750, 780, 810, 840, 870, 900},
                    });
                    put(new ArrayList<>() {
                        {
                            add(-2);
                            add(28);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(7);
                            add(9);
                        }
                    }, new Integer[][] {
                    {0, 7, 8, 9},
                    {7, 49, 56, 63},
                    {8, 56, 64, 72},
                    {9, 63, 72, 81},
                    });
                    put(new ArrayList<>() {
                        {
                            add(26);
                            add(17);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(17);
                            add(5);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(31);
                            add(2);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(-4);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(-4);
                            add(29);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(31);
                            add(31);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(18);
                            add(16);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(-1);
                            add(23);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(18);
                            add(25);
                        }
                    }, new Integer[][] {
                    {0, 18, 19, 20, 21, 22, 23, 24, 25},
                    {18, 324, 342, 360, 378, 396, 414, 432, 450},
                    {19, 342, 361, 380, 399, 418, 437, 456, 475},
                    {20, 360, 380, 400, 420, 440, 460, 480, 500},
                    {21, 378, 399, 420, 441, 462, 483, 504, 525},
                    {22, 396, 418, 440, 462, 484, 506, 528, 550},
                    {23, 414, 437, 460, 483, 506, 529, 552, 575},
                    {24, 432, 456, 480, 504, 528, 552, 576, 600},
                    {25, 450, 475, 500, 525, 550, 575, 600, 625},
                    });
                    put(new ArrayList<>() {
                        {
                            add(3);
                            add(15);
                        }
                    }, new Integer[][] {
                    {0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                    {3, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45},
                    {4, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60},
                    {5, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75},
                    {6, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90},
                    {7, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105},
                    {8, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
                    {9, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135},
                    {10, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150},
                    {11, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165},
                    {12, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180},
                    {13, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195},
                    {14, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210},
                    {15, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225},
                    });
                    put(new ArrayList<>() {
                        {
                            add(28);
                            add(14);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(1);
                            add(-2);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(-3);
                            add(17);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(20);
                            add(-3);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(2);
                            add(11);
                        }
                    }, new Integer[][] {
                    {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
                    {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22},
                    {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33},
                    {4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44},
                    {5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55},
                    {6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66},
                    {7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77},
                    {8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88},
                    {9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99},
                    {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110},
                    {11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121},
                    });
                    put(new ArrayList<>() {
                        {
                            add(8);
                            add(5);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(15);
                            add(17);
                        }
                    }, new Integer[][] {
                    {0, 15, 16, 17},
                    {15, 225, 240, 255},
                    {16, 240, 256, 272},
                    {17, 255, 272, 289},
                    });
                    put(new ArrayList<>() {
                        {
                            add(4);
                            add(3);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(18);
                            add(28);
                        }
                    }, new Integer[][] {
                    {0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28},
                    {18, 324, 342, 360, 378, 396, 414, 432, 450, 468, 486, 504},
                    {19, 342, 361, 380, 399, 418, 437, 456, 475, 494, 513, 532},
                    {20, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560},
                    {21, 378, 399, 420, 441, 462, 483, 504, 525, 546, 567, 588},
                    {22, 396, 418, 440, 462, 484, 506, 528, 550, 572, 594, 616},
                    {23, 414, 437, 460, 483, 506, 529, 552, 575, 598, 621, 644},
                    {24, 432, 456, 480, 504, 528, 552, 576, 600, 624, 648, 672},
                    {25, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700},
                    {26, 468, 494, 520, 546, 572, 598, 624, 650, 676, 702, 728},
                    {27, 486, 513, 540, 567, 594, 621, 648, 675, 702, 729, 756},
                    {28, 504, 532, 560, 588, 616, 644, 672, 700, 728, 756, 784},
                    });
                    put(new ArrayList<>() {
                        {
                            add(26);
                            add(7);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(29);
                            add(21);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(31);
                            add(1);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(20);
                            add(21);
                        }
                    }, new Integer[][] {
                    {0, 20, 21},
                    {20, 400, 420},
                    {21, 420, 441},
                    });
                    put(new ArrayList<>() {
                        {
                            add(29);
                            add(17);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(27);
                            add(20);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(24);
                            add(30);
                        }
                    }, new Integer[][] {
                    {0, 24, 25, 26, 27, 28, 29, 30},
                    {24, 576, 600, 624, 648, 672, 696, 720},
                    {25, 600, 625, 650, 675, 700, 725, 750},
                    {26, 624, 650, 676, 702, 728, 754, 780},
                    {27, 648, 675, 702, 729, 756, 783, 810},
                    {28, 672, 700, 728, 756, 784, 812, 840},
                    {29, 696, 725, 754, 783, 812, 841, 870},
                    {30, 720, 750, 780, 810, 840, 870, 900},
                    });
                    put(new ArrayList<>() {
                        {
                            add(7);
                            add(17);
                        }
                    }, new Integer[][] {
                    {0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
                    {7, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119},
                    {8, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136},
                    {9, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153},
                    {10, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170},
                    {11, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187},
                    {12, 84, 96, 108, 120, 132, 144, 156, 168, 180, 192, 204},
                    {13, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221},
                    {14, 98, 112, 126, 140, 154, 168, 182, 196, 210, 224, 238},
                    {15, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255},
                    {16, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 272},
                    {17, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289},
                    });
                    put(new ArrayList<>() {
                        {
                            add(3);
                            add(2);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(27);
                            add(14);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(6);
                            add(-3);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(29);
                            add(14);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(14);
                            add(22);
                        }
                    }, new Integer[][] {
                    {0, 14, 15, 16, 17, 18, 19, 20, 21, 22},
                    {14, 196, 210, 224, 238, 252, 266, 280, 294, 308},
                    {15, 210, 225, 240, 255, 270, 285, 300, 315, 330},
                    {16, 224, 240, 256, 272, 288, 304, 320, 336, 352},
                    {17, 238, 255, 272, 289, 306, 323, 340, 357, 374},
                    {18, 252, 270, 288, 306, 324, 342, 360, 378, 396},
                    {19, 266, 285, 304, 323, 342, 361, 380, 399, 418},
                    {20, 280, 300, 320, 340, 360, 380, 400, 420, 440},
                    {21, 294, 315, 336, 357, 378, 399, 420, 441, 462},
                    {22, 308, 330, 352, 374, 396, 418, 440, 462, 484},
                    });
                    put(new ArrayList<>() {
                        {
                            add(-1);
                            add(32);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(29);
                            add(15);
                        }
                    }, null);
                    put(new ArrayList<>() {
                        {
                            add(27);
                            add(14);
                        }
                    }, null);
                    /* END AUTOGENERATED CODE */
                }
            };
}
